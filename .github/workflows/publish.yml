name: publish-predix

on:
  push:
    branches: ['main', 'develop']

jobs:
  create-docker-image:
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Login to github container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_BACKAPP_PREDIX }}

      - name: Build and Push Image
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            IMAGE_TAG="latest"
            DOCKERFILE="Dockerfile.prod"
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            IMAGE_TAG="develop"
            DOCKERFILE="Dockerfile.dev"
          fi
          docker build -f $DOCKERFILE . --tag ghcr.io/lusis-developers/predix-backapp:$IMAGE_TAG
          docker push ghcr.io/lusis-developers/predix-backapp:$IMAGE_TAG

  deploy:
    needs: create-docker-image
    runs-on: ubuntu-20.04
    if: ${{ github.ref }} == 'refs/heads/main' || ${{ github.ref }} == 'refs/heads.develop'
    steps:
      - name: Set Deploy Variables
        id: set_vars
        run: |
          echo "IMAGE_TAG=${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${{ github.ref == 'refs/heads/main' && 'myapp-prod' || 'myapp-dev' }}" >> $GITHUB_ENV
          echo "NODE_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}" >> $GITHUB_ENV
          echo "PORT=${{ github.ref == 'refs/heads/main' && '8080' || '8081' }}" >> $GITHUB_ENV

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to DONW WEB VPS
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USER: ${{ secrets.VPS_USER }}
          SSH_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST -p5219 << EOF
            echo "Starting SSH script"
            echo "Image tag: $IMAGE_TAG"
            echo "Container name: $CONTAINER_NAME"
            echo "Node environment: $NODE_ENV"
            echo "Port: $PORT"

            echo "Checking if container $CONTAINER_NAME exists..."
            if docker inspect $CONTAINER_NAME &> /dev/null; then
              echo "Container $CONTAINER_NAME exists, stopping and removing..."
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            else
              echo "Container $CONTAINER_NAME does not exist."
            fi

            echo "Logging into Docker registry..."
            docker login ghcr.io -u lusis-developers -p ${{secrets.TOKEN_BACKAPP_PREDIX}}

            echo "Pulling the Docker image..."
            docker pull ghcr.io/lusis-developers/predix-backapp:$IMAGE_TAG

            echo "Running the Docker container..."
            docker run -d \
              --name $CONTAINER_NAME \
              -p $PORT:8080 \
              --restart always \
              -e PORT=$PORT \
              -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
              -e MONGODB_URI_DEVELOPMENT=${{ secrets.MONGODB_URI_DEVELOPMENT }} \
              -e NODE_ENV=$NODE_ENV \
              -e TYPE=${{ secrets.TYPE }} \
              -e PROJECT_ID=${{ secrets.PROJECT_ID }} \
              -e PRIVATE_KEY=${{ secrets.PRIVATE_KEY }} \
              -e CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }} \
              -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} \
              ghcr.io/lusis-developers/predix-backapp:$IMAGE_TAG
            echo "done..."
          EOF
